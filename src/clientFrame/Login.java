package clientFrame;
import java.net.*;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * Class that displays a Login for user to connect to server requiring username, password, IP address, and port number 
 */

public class Login extends javax.swing.JFrame 
{   
    public static class Client  // Creates object Client which stores client's socket, IP address, Username, and port number
    {
        Socket sock;    // Declares Socket variable sock
        String Addr,Usrname;    // Declares String variables Addr,Usrname for Client's Username and entered IP address 
        int port;   // Delcares Integer variable for port number
    }
     
    String loginUsr, loginAddr, loginPass;  // Declares String variables that hold entered Username, IP address, and Password
    int loginPort;  // Declares an Int variable to hold entered port number
    int loginAttempts = 0;  // Counter for number of login attempts

    Client cli = new Client();  // Creates new Client object cli
    
    InputStreamReader streamreader; // Declares InputStreamReader that will read from input stream
    BufferedReader reader;  // Declares BufferedReader that will buffer characters from InputStreamReader 
    PrintWriter writer; // Declares PrintWriter that will write to output stream

     /**
     * Creates new form Login
     */
    public Login() 
    {
        initComponents();    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Register = new javax.swing.JFrame();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tf_newUsr = new javax.swing.JTextField();
        b_reg = new javax.swing.JButton();
        pf_newPass = new javax.swing.JPasswordField();
        jLabel12 = new javax.swing.JLabel();
        b_login = new javax.swing.JButton();
        b_CrAccnt = new javax.swing.JButton();
        tf_Usr = new javax.swing.JTextField();
        tf_addr = new javax.swing.JTextField();
        tf_port = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pf_pwd = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();

        Register.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        Register.setTitle("Chat - Register");
        Register.setBackground(new java.awt.Color(0, 0, 102));
        Register.setBounds(new java.awt.Rectangle(0, 0, 350, 300));
        Register.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                RegisterWindowClosed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Charlemagne Std", 0, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 0, 0));
        jLabel10.setText("New Username: ");

        jLabel11.setFont(new java.awt.Font("Charlemagne Std", 0, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 0, 0));
        jLabel11.setText("New Password: ");

        tf_newUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_newUsrActionPerformed(evt);
            }
        });

        b_reg.setBackground(new java.awt.Color(255, 255, 0));
        b_reg.setFont(new java.awt.Font("Charlemagne Std", 0, 11)); // NOI18N
        b_reg.setForeground(new java.awt.Color(102, 0, 0));
        b_reg.setText("Register");
        b_reg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_regActionPerformed(evt);
            }
        });

        pf_newPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pf_newPassActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Charlemagne Std", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 0, 0));
        jLabel12.setText("SnD Account");

        javax.swing.GroupLayout RegisterLayout = new javax.swing.GroupLayout(Register.getContentPane());
        Register.getContentPane().setLayout(RegisterLayout);
        RegisterLayout.setHorizontalGroup(
            RegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(RegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RegisterLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_newUsr, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RegisterLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(RegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b_reg)
                            .addComponent(pf_newPass, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(100, 100, 100))
        );
        RegisterLayout.setVerticalGroup(
            RegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel12)
                .addGap(44, 44, 44)
                .addGroup(RegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(tf_newUsr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(RegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pf_newPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(b_reg)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chat - Login");
        setBackground(new java.awt.Color(0, 0, 102));
        setBounds(new java.awt.Rectangle(0, 0, 345, 281));

        b_login.setBackground(new java.awt.Color(255, 255, 0));
        b_login.setFont(new java.awt.Font("Charlemagne Std", 0, 11)); // NOI18N
        b_login.setText("Sign In");
        b_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_loginActionPerformed(evt);
            }
        });

        b_CrAccnt.setBackground(new java.awt.Color(255, 255, 0));
        b_CrAccnt.setFont(new java.awt.Font("Charlemagne Std", 0, 11)); // NOI18N
        b_CrAccnt.setText("Create Account");
        b_CrAccnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_CrAccntActionPerformed(evt);
            }
        });

        tf_Usr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_UsrActionPerformed(evt);
            }
        });

        tf_addr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_addrActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Charlemagne Std", 0, 11)); // NOI18N
        jLabel1.setText("Username:");

        jLabel2.setFont(new java.awt.Font("Charlemagne Std", 0, 11)); // NOI18N
        jLabel2.setText("Password:");

        jLabel3.setFont(new java.awt.Font("Charlemagne Std", 0, 11)); // NOI18N
        jLabel3.setText("IP Address:");

        jLabel4.setFont(new java.awt.Font("Charlemagne Std", 0, 11)); // NOI18N
        jLabel4.setText("Port No.");

        jLabel5.setFont(new java.awt.Font("Charlemagne Std", 0, 18)); // NOI18N
        jLabel5.setText("Welcome to SnD");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pf_pwd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                                    .addComponent(tf_addr, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_port)
                                    .addComponent(tf_Usr)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b_login, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(b_CrAccnt))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel5)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(tf_Usr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(pf_pwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(tf_addr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(tf_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_login)
                    .addComponent(b_CrAccnt))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     /**
     * Button that opens Create account/Register Frame
     */
    private void b_CrAccntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_CrAccntActionPerformed
        boolean addr = false;   // Boolean variable to determine if IP address entered is valid
        boolean port = false;   // Boolean variable to determine if port number entered is valid
        
        loginAddr = tf_addr.getText();  // Initializes loginAddr with text entered into IP address field
        
        try
        {
            int i;  // Declares integer variable 
            if(loginAddr == null || loginAddr.isEmpty())    // If address entered is null or empty
            {   
                JFrame frame = new JFrame("Error"); // Display Error frame
                JOptionPane.showMessageDialog(frame, "Please enter an IP address"); // Display error message on frame
            }
            else if (!loginAddr.toLowerCase().equals("localhost"))  // Else if address entered is not 'localhost' 
            {
                String[] parts = loginAddr.split( "\\." );  // Parse address entered with token '.' into a string array
                if(loginAddr.length() > 15 || loginAddr.length() < 9)   // If address entered is greater than 15 characters or less than 9 characters
                {
                    JFrame frame = new JFrame("Error"); // Display Error Frame
                    JOptionPane.showMessageDialog(frame, "Please enter an appropriate IP address!");    // Display error message on frame
                }
                else if ( parts.length == 4 )   // Else if string array equals 4
                {
                    for ( String s : parts ) // For the number of strings in string array, string s intialized to string array elements
                    {
                        i = Integer.parseInt( s );  // Turns string into integer value and intializes integer variable with it 
                        if ( (i < 0) || (i > 255) ) // If integer i is less than 0 or greater than 255
                        {
                           JFrame frame = new JFrame("Error");  // Display error frame
                           JOptionPane.showMessageDialog(frame, "Please enter appropriate IP address values!"); // Display error message on frame 
                        }          
                    }
                }
                else if (parts.length > 4 || parts.length < 4 || loginAddr.endsWith("."))   // If string array has more or less than 4 elements or address entered ends with a '.'
                {
                    JFrame frame = new JFrame("Error"); // Display error frame
                    JOptionPane.showMessageDialog(frame, "Please enter an IP address in proper format!");   // Display error message on frame   
                }  
            }
            else 
            {
                addr = true;    // Set boolean variable associated with IP address entered as true meaning it is valid 
            }
        } 
        catch (NumberFormatException ex) 
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Please enter an IP address in proper format or enter 'localhost' if server is on same system as client!");   // Display error message on frame
        }
       
        String portnum = tf_port.getText(); // Initialize string variable with text entered into port number field
        
        if (portnum.matches("[0-9]+") && portnum.length() == 4) // If port number entered is made of numbers and its length = 4
        {
              loginPort = Integer.parseInt(portnum);    // Initializes integer variable with string converted into integer form 
              if(loginPort < 9036 || loginPort > 9040 ) //If port number entered is less than 9001 or greater than 9060
              {
                  JFrame frame = new JFrame("Error");   // Display error frame
                  JOptionPane.showMessageDialog(frame, "Please enter a Port Number between 9036 and 9040"); // Display error message on frame
              }
              else
              {
                  port = true;  // Set booelan variable associated with port number to true meanig that the entered port number is valid
              }
        }
        else
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Please enter a Port Number between 9036 and 9040");   // Display error message on frame
        }     
        
        if(addr == true && port == true)    // If address and port number entered are true or valid
        {
            cli.Addr = loginAddr;   // Client object's address initialized with address entered
            cli.port = loginPort;   // Client object's port number initialized with entered port number entered
            try
            {
                cli.sock = new Socket(cli.Addr,cli.port);   // Client object's Socket initialized with new socket object based on Client object's IP address and port number 
                streamreader = new InputStreamReader(cli.sock.getInputStream());    // Initializes InputStreamReader variable with new InputStreamReader object set to read in from socket input stream
                reader = new BufferedReader(streamreader);   // Initializes BufferedReader variable with new BufferedReader object set to read and buffer characetrs from InputStreamReader object
                writer = new PrintWriter(cli.sock.getOutputStream());   // Initializes PrintWriter variable with new PrintWriter object set to write to socket output stream
                setVisible(false);  // Set current Jframe to not visible
                Register.setVisible(true);  // Set register Jframe to visible
            }
            catch(IOException ex)
            {
               JFrame frame = new JFrame("Error"); // Displays Error frame
               JOptionPane.showMessageDialog(frame, "Server not Available!\nTry a different IP Address or Port");   // Display error message on frame 
            }      
        }
    }//GEN-LAST:event_b_CrAccntActionPerformed

    /**
     * Text field for Username 
     */
    private void tf_UsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_UsrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_UsrActionPerformed

    /**
     * Text field for IP address
     */
    private void tf_addrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_addrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_addrActionPerformed

    /**
     * Button that performs login function 
     */
    private void b_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_loginActionPerformed
        boolean addr = false;   // Boolean variable to see if IP address entered is valid 
        boolean port = false;   // Boolean variable to see if port number entered is valid
        boolean goodusr = false;    // Boolean variable to see if username entered is valid
        boolean goodpass = false;   // Boolean variable to see if password entered is valid
        
        loginUsr = tf_Usr.getText();    // Initializes string variable with text entered into username text field
       
        if (loginUsr == null || loginUsr.isEmpty()) // If username entered is null or is empty 
        {
           JFrame frame = new JFrame("Error");  // Display error frame
           JOptionPane.showMessageDialog(frame, "Please enter a Username!");    // Display error message on frame
        }
        else if(loginUsr.length() > 12) // Else if username entered is longer than 12 characters
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Username too long!"); // Display error message on frame
        }
        else if(loginUsr.length() < 2)  // Else if username entered is less than 2 characters
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Username too short!");    // Display error message on frame
        }
        else if(!loginUsr.matches("[a-zA-z_!@$#?0-9]{2,12}"))
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Username has unacceptable characters!"); // Display error message on frame
        }
        else
        {
             goodusr = true;    // Set boolean variable associated with username to true, meaning it's valid
        }

        char[] pwd = pf_pwd.getPassword();  // Initialize character array with password entered into passwordfield
        loginPass = new String(pwd);    // Initialize string variable with new string object based on character array 
        
        if (loginPass == null || loginPass.isEmpty())   // If password entered is null or is empty
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Please enter a Password!");   // Display error message on frame
        }
        else if(loginPass.length() > 18)    // Else if  password entered is greater than 18 characters
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Password too long!"); // Display error message on frame
        }
        else if(loginPass.length() < 8) // Else if password entered is less than 8 characters
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Password too short!");    // Display error message on frame
        }
        else if(!loginPass.matches("[a-zA-z_!@$#?0-9]{2,12}"))
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Password has unacceptable characters!"); // Display error message on frame
        }
        else
        {
            goodpass = true;    // Set boolean variable associated with password to true, meaning it's valid
        }
        Arrays.fill(pwd,'0');   // Zero out character array
      
        loginAddr = tf_addr.getText();  // Initialize string variable with address entered  
       
        try
        {
            int i;  // Declare integer variable 
            if(loginAddr == null || loginAddr.isEmpty())    // If address entered is null or empty
            {   
                JFrame frame = new JFrame("Error"); // Display Error frame
                JOptionPane.showMessageDialog(frame, "Please enter an IP address"); // Display error message on frame
            }
            else if (!loginAddr.toLowerCase().equals("localhost"))  // Else if address entered is not equal to 'localhost'
            {
                String[] parts = loginAddr.split( "\\." );  // Initializes string array with address entered parsed by token '.'
                if(loginAddr.length() > 15 || loginAddr.length() < 9)   // If address is greater than 15 characters or less 9 characters
                {
                    JFrame frame = new JFrame("Error"); // Display error frame
                    JOptionPane.showMessageDialog(frame, "Please enter an appropriate IP address!");    // Display error message on frame
                }
                else if ( parts.length == 4 ) // Else if string array has 4 elements
                {
                    for ( String s : parts ) // For all elements in string array, initialize string s with an element  
                    {
                        i = Integer.parseInt( s );  // Initialize integer variable with string s converted to integer
                        if ( (i < 0) || (i > 255) ) // If integer variable is less than 0 or greater than 255
                        {
                           JFrame frame = new JFrame("Error");  // Display error frame
                           JOptionPane.showMessageDialog(frame, "Please enter appropriate IP address values!"); // Display error message on frame
                        }        
                    }
                }
                else if (parts.length > 4 || parts.length < 4 || loginAddr.endsWith("."))   // Else if string array has more or less than 4 elements or address entered ends with a '.'
                {
                    JFrame frame = new JFrame("Error"); // Display error frame
                    JOptionPane.showMessageDialog(frame, "Please enter an IP address in proper format!");   // Display error message on frame             
                }
            }
            else 
            {
                addr = true;    // Set boolean variable associated with IP address entered as true meaning it is valid 
            }
        } 
        catch (NumberFormatException ex) 
        {
            JFrame frame = new JFrame("Error"); // Displays Error frame
            JOptionPane.showMessageDialog(frame, "Please enter an IP address in proper format or enter 'localhost' if server is on same system as client!");   // Display error message on frame
        }

        String portnum = tf_port.getText(); // Initialize string variable with text entered into port number field
        
        if (portnum.matches("[0-9]+") && portnum.length() == 4) // If port number entered is made of numbers and its length = 4
        {
              loginPort = Integer.parseInt(portnum);    // Initializes integer variable with string converted into integer form 
              if(loginPort < 9036 || loginPort > 9040 ) //If port number entered is less than 9001 or greater than 9060
              {
                  JFrame frame = new JFrame("Error");   // Display error frame
                  JOptionPane.showMessageDialog(frame, "Please enter a Port Number between 9036 and 9040"); // Display error message on frame
              }
              else
              {
                  port = true;  // Set booelan variable associated with port number to true meanig that the entered port number is valid
              }
        }
        else
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Please enter a Port Number between 9036 and 9040");   // Display error message on frame
        }     
        
        if(goodusr == true && goodpass == true && addr == true && port == true) // If username, password, IP address, and port number are all valid 
        {
           cli.Addr = loginAddr;    // Initialize Client object's address with address entered 
           cli.port = loginPort;    // Initialize Client object's port number with port number entered 
           cli.Usrname = loginUsr;  // Initialize Client object's username with username entered 
        
           try
           {
                cli.sock = new Socket(cli.Addr,cli.port);   // Client object's Socket initialized with new socket object based on Client object's IP address and port number 
                streamreader = new InputStreamReader(cli.sock.getInputStream());    // Initializes InputStreamReader variable with new InputStreamReader object set to read in from socket input stream
                reader = new BufferedReader(streamreader);   // Initializes BufferedReader variable with new BufferedReader object set to read and buffer characetrs from InputStreamReader object
                writer = new PrintWriter(cli.sock.getOutputStream());   // Initializes PrintWriter variable with new PrintWriter object set to write to socket output stream
               
                writer.println(cli.Usrname+"&"+loginPass+"&Trying to Connect&Verify");  // PrintWriter object writes to server the Client object's username, password entered, and command to verify through socket connection output stream
                writer.flush(); // Clear or Flush PrintWriter object buffer 
                String[] data;  // Declare string array 
                String stream;  // Declare string variable
                stream = reader.readLine(); // Initialize string variable with input read from socket connection input stream 
               
                data = stream.split("&");   // Initialize string array with string variable parsed by token ':'
                
                if(data[2].equals("Valid")) // If string array element at position 2 equals 'Valid'
                {
                    
                    Cli_Frame cliframe = new Cli_Frame(cli);    // Create new object Cli_Frame passing in Client object
                    cliframe.setVisible(true);  // Make new Cli_Frame object jframe visible
                    cli.sock.close();   // Close Login Frame's socket connection to server
                    dispose();  // Dispose of Login JFrame
                }
                else if(data[2].equals("Invalid"))  // Else if string array element at position 2 equals 'Invalid'
                {
                    loginAttempts++;    // Increment number of login attempts by 1
                    JFrame frame = new JFrame("Error"); // Display error frame  
                    JOptionPane.showMessageDialog(frame, "Username or Password is incorrect!\nIf you do not have an account, please create one!");  // Display error message on frame
                    cli.sock.close();   // Close socket connection
                }
                else if(data[2].equals("Unavailable"))  // Else if string array element at position 2 equals 'Unavailable'
                {
                    loginAttempts++;    // Increment number of login attempts
                    JFrame frame = new JFrame("Error"); // Display error frame
                    JOptionPane.showMessageDialog(frame, "That user is already online!\nIf you do not have an account, please create one!");    // Display error message on frame
                    cli.sock.close();   // Close Socket Connection
                }
                
                if(loginAttempts == 3)  // If number of login attempts equals 3
                {
                    JFrame frame = new JFrame("Warning");   // Display Warning frame
                    JOptionPane.showMessageDialog(frame, "YOU HAVE ONE LOGIN ATTEMPT LEFT!");   // Display warning message on frame
                }
                else if(loginAttempts == 4) // Else if number of login attempts equals 4
                {
                    JFrame frame = new JFrame("Warning");   // Display Warning frame
                    JOptionPane.showMessageDialog(frame, "YOU HAVE NO LOGIN ATTEMPTS LEFT!\nEXITING LOGIN..."); // Display warning message on frame
                   
                    cli.sock.close();   // Close socket connection
                    dispose();  // Dispose of Login Jframe
                }
  
           }
           catch(IOException ex)
           {
               JFrame frame = new JFrame("Error"); // Displays Error frame
               JOptionPane.showMessageDialog(frame, "Server not Available!\nTry a different IP Address or Port"); // Display error message on frame
           }
          
        }
    }//GEN-LAST:event_b_loginActionPerformed

    /**
     * Text field for new username to be entered
     */
    private void tf_newUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_newUsrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_newUsrActionPerformed

    /**
     * Button that performs registration function
     */
    private void b_regActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_regActionPerformed
        boolean notgoodusr = false; // Boolean variable to determine if username is invalid
        boolean notgoodpass = false;    // Boolean variable to determine if password is invalid
        String newUsr = tf_newUsr.getText();    // String variable intialized with text input into new username textfield

        if(newUsr.length() > 12)    // If new username entered is longer than 12 characters
        {
            JFrame frame = new JFrame("Error"); // Displays Error frame
            JOptionPane.showMessageDialog(frame, "Username too long!\nPlease enter a username with a length less than 13!");    // Displays Error message on frame
            notgoodusr = true;  // Sets boolean variable associated with username to true meaning username is invalid
        }
        else if(newUsr.length() < 4)    // Else if new username entered is less than 4 characters
        {
            JFrame frame = new JFrame("Error"); // Displays Error frame
            JOptionPane.showMessageDialog(frame, "Username too short!\nPlease enter a username with a length greater than 3!");  // Displays Error message on frame
            notgoodusr = true;  // Sets boolean variable associated with username to true meaning username is invalid
        }
        else if(!newUsr.matches("[a-zA-z_!@$#?0-9]{2,12}"))
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Username has unacceptable characters!"); // Display error message on frame
            notgoodusr = true; 
        }

        char[] pwd = pf_newPass.getPassword();  // Initializes character array pwd with new password entered into Password field
        String newPass = new String(pwd);   // Creates new string initialized from character array

        if(newPass.length() > 18)   // If new password entered is greater than 18 characters
        {
            JFrame frame = new JFrame("Error"); // Displays Error frame
            JOptionPane.showMessageDialog(frame, "Password too long!\nPlease enter a password with a length less than 19!");    // Displays Error message on frame
            notgoodpass = true; // Sets boolean variable associated with password to true meaning password is invalid
        }
        else if(newPass.length() < 8)   // Else if new password entered is less than 8 characters
        {
            JFrame frame = new JFrame("Error"); // Displays Error frame
            JOptionPane.showMessageDialog(frame, "Password too short!\nPlease enter a password with a length greater than 7!");  // Displays Error message on frame
            notgoodusr = true;  // Sets boolean variable associated with password to true meaning password is invalid
        }
        else if(!newPass.matches("[a-zA-z_!@$#?0-9]{2,12}"))
        {
            JFrame frame = new JFrame("Error"); // Display error frame
            JOptionPane.showMessageDialog(frame, "Password has unacceptable characters!"); // Display error message on frame
            notgoodpass = true; 
        }
        
        Arrays.fill(pwd,'0'); // Zeroes out password character array

        if(notgoodusr == false && notgoodpass == false) // If boolean variable associated with username is false and boolean variable associated with password is false meaning both are valid
        {
            try
            {
                writer.println(newUsr+"&"+newPass+"&Creating Account&Create");  // PrintWriter write to server through output stream new username, password, and command Create to add new account
                writer.flush(); // Clear or Flush writer buffer
                String[] data;  // Declares new String array
                String stream;  // Declares new String
                while ((stream = reader.readLine()) != null)    // While string variable intialized with input read from input stream doesn't equal null
                {
                    data = stream.split("&");   // Initializes String array with parsed string split based on semicolon token
                    if(data[2].equals("Added")) // If string in position 2 of string array equals word "Added" meaning server did not find username already registered
                    {
                        cli.sock.close();
                        setVisible(true);
                        Register.dispose();  // Dispose of or close out current register object
                        break;  // Break out of while loop
                    }
                    else if(data[2].equals("Taken"))    // If string in position 2 of string array equals word "Taken" meaning server found username already registered
                    {
                        JFrame frame = new JFrame("Error"); // Displays Error frame
                        JOptionPane.showMessageDialog(frame, "Account Creation Failed!\nUsername taken!\nPlease try again!");   // Displays error message on frame
                    }

                }
            }
            catch(IOException ex)    // Catches any IOExceptions
            {
                JFrame frame = new JFrame("Error"); // Displays Error frame
                JOptionPane.showMessageDialog(frame, "Failed to Write to Server!"); // Displays error message on frame
            }

        }
    }//GEN-LAST:event_b_regActionPerformed

    /**
     * Password field for password to be entered
     */
    private void pf_newPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pf_newPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pf_newPassActionPerformed

    /**
     * Window listener that closes socket connection and sets Login frame back to being visible when Register window is closed out
     */
    private void RegisterWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_RegisterWindowClosed
        try {
            cli.sock.close();   // closes socket connection
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        setVisible(true);   // Makes Login frame visible again
    }//GEN-LAST:event_RegisterWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame Register;
    private javax.swing.JButton b_CrAccnt;
    private javax.swing.JButton b_login;
    private javax.swing.JButton b_reg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPasswordField pf_newPass;
    private javax.swing.JPasswordField pf_pwd;
    private javax.swing.JTextField tf_Usr;
    private javax.swing.JTextField tf_addr;
    private javax.swing.JTextField tf_newUsr;
    private javax.swing.JTextField tf_port;
    // End of variables declaration//GEN-END:variables
}
